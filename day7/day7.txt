--------------------복습시작----------------------
1.StringBuffer (!=String)
   String 은 불변(immutable) 이라는 특징 때문에
   
   String str="apple"; //한번 만들어진 상수는 고정
   
   for(int i=1; i<100; i++){
	str+=i; 
   } //메모리를 많이 먹는다.. 그래서 해결책이 StringBuffer

2.Wrapper 클래스
기본자료형을 감싸서 객체자료형을 만든다
-기본자료형으로는 처리할 수 없는 다양한
 기능들을 제공하는 클래스
 
 ex) "3" --> 3 , 3 --> "3"
 - 기본자료형과 객체자료형 간의 형변환을 지원한다
 - 자바의 모든 기본자료형마다 1:1 대응하는
   Wrapper 클래스가 지원된다!!
 
 - byte  --> Byte

 3.추상클래스와 인터페이스
 추상클래스란? 불완전한 클래스를 의미
		  불완전하다는 것은 추상메서드를 단 하나만이라도
		  보유하고 있다면 추상클래스라 한다.

 왜 사용하나?  자식클래스로 하여금 특정 기능에 대한 
		  구현을 강제하기 위해...
 ex) 헌법 : 권리 , 의무 , 행복할 방법 (추상적이다=미래에뭐가나올지라도 다 아우를수 있다.)

 인터페이스란? 기능만을 보유한 객체 
		  클래스가 아니므로, 다중상속의 문제를 해결할 수 있다.

 추상클래스와 인터페이스에서 놓치지 말아야 할 개념
 extends , implements = is a 관계는
 결국 같은 자료형을 의미하고, 같은자료형이라 한다면 형변환 가능하다!!

 수정자
 static : 클래스 변수, 클래스 메서드를 지정하는 수정자
 final : 클래스 --> 상속불가
          메서드 --> 오버라이딩(업그레이드) 불가
	  변수   -->  그 값이 변경될 수 없다..
 abstract : 클래스 --> 추상클래스
	       메서드 --> 추상메서드 (브레이스(바디=몸체)가없는)
               변수 --> 에러 (변수는 브레이스가 없으므로..)
 상수
 1. 모든 인스턴스가 그 값이 공유되어야 한다 static
 2. 모든객체가 접근 할 수 있어야 한다 public
 3. 그 값이 변경될 수 없다 final
 
 상수선언
 ex) 
 게임 할 때 윈도우 크기는 변하지 않으니..
 ***class 는 앞자만 대문자, 상수는 모든글자가 대문자!!!
 public static final int  WIDTH=800;

 #UseWrapper 파일 보기!!!!

 ------------------------------------------------------------------
 
 자바의 GUI 프로그래밍

 (1) java.awt 패키지에서 주로 지원

 (2) GUI 컴포넌트 큰 2가지 분류
      컨테이너 - 다른 컴포넌트를 포함할 수 있는 컴포넌트
      - ex) Frame , Panel , Applet(X-요즘에안써서..)..
      더 넓은 공간이 배치를 고민한다!!
      모든 컨테이너는 배치관리자가 적용되어야 하며,
      만일 개발자가 배치관리자를 결정하지 않으면 에러?
      에러가 발생하는 것이 아니라, 자바의 디폴트 배치 관리자가 
      적용되버린다.. 
      
      자바 GUI 5가지 배치관리자
      - FlowLayout (컨테이너에 따라 유동적)
      - BorderLayout (동서남북, 중앙의 방위를 갖는)
      - GridLayout(행과 열을 지원하는 레이아웃)
      - GridBagLayout(x,y 좌표로 배치가능한 레이아웃)
			NetBean IDE과 같은 툴 이용하면 좋음
      - CardLayout(이벤트 배우면 배울것인데.. 카드장처럼 위로 올라오는)

      Frame --> BorderLayout(대왕)
      Panel --> FlowLayout(유동적+컴포넌트 본래의 크기를 보존)

      비쥬얼 컴포넌트(일반 컴포넌트) - 포함당하는 컴포넌트
      - ex) Button, Chekbox , TextArea...
 

유저가 버튼을 눌렀을 때(이벤트 발생시) 가장 먼저 반응하는 것은
윈도우!! -> 윈도우가 JVM 에서 전달

윈도우는 자바가 아니기 때문에 윈도우대로 해석한다..

클릭하면, 윈도우는 클릭이라고 해석함

윈도우가 누가 눌렀어라고 전달
자바의 규칙에 의해서는 액션이벤트가 발생했다고 받아들임

누를때마다 올라간다!!

액션이벤트를 감지한 JVM 은 결국 프로그래머에게 보여져야함

언제든지 클릭된 것을 인식해야함(들어야함)
리스너 - 액션이벤트 만을 들어야 한다 - 액션리스너

액션리스너는 몸체가 없다..
개발자가 어떤 액션을 취할지 모르니깐

액션리스너는 인터페이스 (다중상속 가능한)

액션리스너는 추상메서드로 구성되어있다
메서드가 어떤 것이 있는지 method 들어가서 보기



--------------------------------------------------------------
오후 1교시

전체 BorderLayout

JMenuBar
-메뉴바는 그냥 붙히기만 하면 알아서 위에가서 붙는다

JMenu

JMenuItem

JScroll

