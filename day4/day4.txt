메서드
- 매개변수
- 리턴값

생성자도 메서드다!! : 생성자메서드
- 매개변수
- 리턴값X(쓰면 안됨)
- 오버로딩 적용됨
-----------------------------------------------------
OverLoading
- 로직이 비슷한 경우, 메서드명 만드느라 고생하지말자!!
  매개변수의 자료형 및 갯수로 구분하자
  반환형은 고려대상 아님..
-----------------------복습끝------------------------------

1교시

public < protected < default < private

개발자가 접근제한자를 지정하지 않으면 default 접근제한자가 적용된다..
주의) default 접근제한자는 명시해서는 안되고 그냥
		냅두면 된다.. (아무것도 안쓰는게 디폴트!!)
public : 보안이 아니다!! 모든 클래스가 접근할 수 있다!!
protected : 상속관계에 있는 클래스가 접근 허용 
				(+같은 패키지 내에 있는 클래스)	

default : 같은 패키지내에 있는 클래스만 접근 허용
				같은 디렉토리 내에서만 접근가능!!

private : 외부의 모든 클래스의 접근을 불허한다!!
			멤버메서드만이 접근 가능..

은닉화란?
- 클래스 안에 데이터를 담는 변수에 대한 접근을
	private 으로 제한을 가하고, 이 변수에 대해
	제어할 수 있는 방법을 메서드를 통해 제공하는
	클래스 작성 기법을 은닉화, 캡슐화(encaptualation)라 한다..

	ex)리모컨 안에 전기판을 플라스틱으로 막지 않으면
	1. 내부가 보존되지 않고 - 플라스틱 외부로 보존되게
	2. 사용자가 사용할 수 없다 (컨트롤 할수 없다) - 고무파킹 버튼으로 컨트롤 가능하게
	--> 

데이터의 직접 접근은 막고, 이 데이터에 대한 사용은 
개발자가 제공하는 메서드에 의해 제어할 수 있도록 허용해주자

#변수사용 1.변경 2.값을 얻어감

객체지향 언어에서, private 을 막아놓은 변수를
제어할 수 있도록 정의되는 메서드들은
전세계 개발자들간의 명명규칙을 따라 정의
해야 한다...

#값 변경을 위한 메서드를 setter 라 한다
#값 반환받기 위한 메서드를 getter 라 한다.

#setter/getter 표기 규칙
단어와 단어가 만나면 뒷단어의 첫철자를
대문자로 표기해야한다..


-----------------------------------------------------------

2교시

판매할 때는 원본소스(.java)가 아닌 .class 를 판매
그래서 원본과 결과물을 분리시켜보자

실제 현업에서는 작업공간 폴더 안 프로젝트 별로 폴더를 나눈다

패키지명은 반드시 소문자로

myproject - src (원본소스폴더)
		- bin (컴파일폴더)

--컴파일 할때 무언가 옵션을 추가해보자
 -d <directory>  Specify where to place generated class files
 생성된 클래스 파일이 어디로 갈지 정하세요

DEL  하나 이상의 파일을 지웁니다.
C:\Java_workspace\myproject\src>del Color.class

컴파일하는 방법 (-d 이용해서 원본소스와 컴파일 분리시는 방법)
C:\Java_workspace\myproject\src>javac -d C:\Java_workspace\myproject\bin Color.java
-> 완료하면 bin 에 .class 파일이 생김

bin 폴더에 계속 쌓여서 구분불가!!
-> 패키지를 나누자!!!

.java 파일 상단에 package 디렉토리;

적고!!!!!!!

다시 컴파일 하기!!
C:\Java_workspace\myproject\src\art>javac -d C:\Java_workspace\myproject\bin Color.java

**-d 옵션을 쓰면 .java 파일에 상단에 적어놓은 package 디렉토리; 의 디렉토리에 해당하는 폴더가 없을 때는 
자동으로 폴더를 만들고 그 안에 .class 가 생성된다

#원본소스 폴더는 개발자가 직접 만들어야한다..
컴파일시 컴파일 파일의 폴더만 자동으로 만들어짐..

#classpath 를 환경변수에 가서 새로만들기해서 추가
**실무시 무작정 적용시켜줘야한다!!
변수이름: classpath (sun사에서 지정한 고정변수이름, 고치면 안먹힌다.)
변수값: C:\Java_workspace\myproject\bin

#여러개의 프로젝트 시 classpath 를 여러개 둬야한다면
.;변수값;변수값; //변수값 추가하고 세미콜론 하면서 추가하자

#프로그램 깔면서 인스톨 중에 자동으로 환경변수도 설정된다

#Duck 만들기-UseDuck 만들기-컴파일 가능하게 도구추가-
환경변수 재설정하면, 기존의 cmd 에딧플러스등 사용하는 프로그램을 재시작해야한다..

----------------------------------------------------------------------

오후 1교시

이 세상의 모든 사물은 서로 관련성, 관계가 있다.
객체지향인 자바에서는 이 관계를 크게 2가지로 본다
클래스 - 현실반영 , 단독적이지 않고 서로 연결되어 있음

1. has a 관계
 - 특정 클래스가 다른 클래스를 멤버로 보유한 경우

2. is a 관계
 - 

#상속 (객체지향의 핵심개념): 과거의 코드를 다시 써먹자
 상속은 부모부터 존재해야 자식이 만들어진다..

#null : '데이터가 없다' 라는 뜻


----------------------------------------------------------------------

오라클 수업


1.MILLER가 소속된 부서의 사원들의 최저 급여보다 급여가 높은 사원의 이름 ,급여, 부서번호를 출력하세요

	select deptno, sal ,ename from emp
	where sal>(select min(sal) from dept having MILLER)

2.이름에 E가 들어가는 사원들 중에 가장 높은 급여를 받는 사원보다 더 많은 급여를 받는  사원의 이름, 급여 출력 

	select ename,sal from emp
	where sal>(select max(sal) from emp where ename like '%E%')

3.10번 부서에서 제일 늦게 입사한 사람보다 월급이 적은 사람의 이름, 급여, 고용일을 입사일 기준 오름차순으로 출력하세요.

4.EMP 테이블에서 가장 많은 사원이 속해있는 부서번호와 사원수를 출력하라. 

5.입사일이 SMITH보다 느린 사람의 급여와 직업을 출력하세요

6.부서번호가 30번인 사원들 중 급여를 가장 많이 받는 사원보다 더 많은 급여를 받는 사원명, 급여를 출력

	select ename, sal from emp
	where sal>(select max(sal) from emp where deptno=30);

7.최대 커미션을 받는 사원 보다 입사일이 빠른 사원들의 사원명, 부서명, 급여를 출력하시오

8.JOB이 SALESMAN인 사원들 중에서 급여가 가장 높은 사원의 이름과 입사일을 검색하세요 

	select ename, hiredate from emp
	where sal=(select max(sal) from emp where job='SALESMAN')

9.WARD와 직급이 (job) 같은 사람중 급여가 가장 높은 사람보다 입사일이 늦은 사람들의 입사일을 출력하시오.

10.커미션을 받지않는 사원 중 입사일이 가장 빠른  사원의 이름, 입사일.
	
	select ename, hiredate from emp
	where hiredate from emp where comm is null

11.SCOTT과 같은 부서이면서 연봉이 2000이상 4000이하인 사원의 이름, 입사일.
	
	select ename, hiredate , from emp
	where sal>2000 and sal<4000 
	
	

12.Salesman의 평균임금보다 임금을 많이 받는 saleman들의 이름 임금 

	select ename, sal from emp
	where 